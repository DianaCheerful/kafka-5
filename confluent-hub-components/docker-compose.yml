services:

  kafka-0:
    image: bitnami/kafka:3.4
    restart: always
    ports:
      - "127.0.0.1:9094:9094"                           # Проброс EXTERNAL порта наружу (доступ извне)
    environment:
      KAFKA_CFG_NODE_ID: 0                              # Уникальный ID узла внутри кластера
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094  # Список слушателей для разных задач
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094  # Адреса, которые Kafka "рекламирует" наружу
      KAFKA_ENABLE_KRAFT: yes                          # Включение режима KRaft (Kafka без Zookeeper)
      ALLOW_PLAINTEXT_LISTENER: yes                    # Разрешение незашифрованных подключений
      KAFKA_KRAFT_CLUSTER_ID: practicum                # Уникальный идентификатор KRaft-кластера (задан один раз при первом запуске)
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT"  # Протоколы для разных типов слушателей
      KAFKA_CFG_PROCESS_ROLES: broker,controller       # Роль узла: одновременно брокер и контроллер метаданных
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER  # Контроллер использует listener CONTROLLER (для внутреннего кворума метаданных)
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093  # Участники кворума контроллеров
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false       # Отключить автосоздание топиков
    volumes:
      - kafka_0_data:/bitnami/kafka                     # Хранилище данных Kafka
    networks:
      - proxynet

  ui:
    image: provectuslabs/kafka-ui:v0.7.0
    restart: always
    ports:
      - "127.0.0.1:8080:8080"                           # Интерфейс доступен на localhost:8080
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka-0:9092 # Указываем, где искать брокер Kafka
      KAFKA_CLUSTERS_0_NAME: kraft                     # Название кластера в UI
    networks:
      - proxynet

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    ports:
      - '127.0.0.1:8081:8081'                           # API для регистрации/получения схем
    depends_on:
      - kafka-0
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-0:9092
      SCHEMA_REGISTRY_HOST_NAME: schema
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081    # Прослушивание запросов на порту 8081
      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka-0:9092 # Список брокеров Kafka
    networks:
      - proxynet

  postgres:
    image: debezium/postgres:16
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres-user
      POSTGRES_PASSWORD: postgres-pw
      POSTGRES_DB: customers
    volumes:
      - ./postgres/custom-config.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - proxynet

  kafka-connect:
    build:
      context: ./kafka-connect
    ports:
      - "8083:8083"
      - "9875:9875"
      - "9876:9876"
    depends_on:
      - kafka-0
      - schema-registry
      - postgres
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-0:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'

      CONNECT_CONFIG_STORAGE_TOPIC: 'connect-config-storage'
      CONNECT_OFFSET_STORAGE_TOPIC: 'connect-offset-storage'
      CONNECT_STATUS_STORAGE_TOPIC: 'connect-status-storage'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL:  'http://schema-registry:8081/'
      # Export JMX metrics to :9876/metrics for Prometheus
      KAFKA_JMX_PORT: '9875'
      KAFKA_OPTS: "-javaagent:/kafka-connect/jars/jmx_prometheus_javaagent-0.15.0.jar=9876:/kafka-connect/kafka-connect.yml"
      # Read connection password from file
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"

      CONNECT_PLUGIN_PATH: /kafka-connect/jars

    volumes:
      - ./kafka-connect/jars/:/kafka-connect/jars
    networks:
      - proxynet

  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    links:
      - kafka-connect
    networks:
      - proxynet

  grafana:
    build:
      context: ./grafana
    ports:
      - 3000:3000
    networks:
      - proxynet

networks:
  proxynet:
    name: custom_network                               # Общая пользовательская сеть Docker

volumes:
  kafka_0_data: